Given a set of N jobs where each jobi has a deadline and profit associated with it.

Each job takes 1 unit of time to complete and only one job can be scheduled at a time. We earn the profit associated with job if and only if the job is completed by its deadline.

Find the number of jobs done and the maximum profit.

Note: Jobs will be given in the form (Jobid, Deadline, Profit) associated with that Job.


Example 1:

Input:
N = 4
Jobs = {(1,4,20),(2,1,10),(3,1,40),(4,1,30)}
Output:
2 60
Explanation:
Job1 and Job3 can be done with
maximum profit of 60 (20+40).
Example 2:

Input:
N = 5
Jobs = {(1,2,100),(2,1,19),(3,2,27),
        (4,1,25),(5,1,15)}
Output:
2 127
Explanation:
2 jobs can be done with
maximum profit of 127 (100+27).




def jobScheduling(N, Jobs):
    # Sort the jobs by profit in descending order
    Jobs.sort(key=lambda x: x[2], reverse=True)
    
    max_deadline = max(Jobs, key=lambda x: x[1])[1]
    slots = [-1] * (max_deadline + 1)  # Initialize time slots to -1
    
    total_profit = 0
    total_jobs = 0
    
    for job in Jobs:
        deadline, profit = job[1], job[2]
        for i in range(deadline, 0, -1):
            if slots[i] == -1:
                slots[i] = job[0]
                total_profit += profit
                total_jobs += 1
                break

    return total_jobs, total_profit

# Example usage
N1 = 4
Jobs1 = [(1, 4, 20), (2, 1, 10), (3, 1, 40), (4, 1, 30)]

N2 = 5
Jobs2 = [(1, 2, 100), (2, 1, 19), (3, 2, 27), (4, 1, 25), (5, 1, 15)]

result1 = jobScheduling(N1, Jobs1)
result2 = jobScheduling(N2, Jobs2)

print(result1)  # Output: (2, 60)
print(result2)  # Output: (2, 127)

